%h3#handled-incidents
  %span
  - if @start_date == @end_date
    Alerts that recovered within 2 minutes of alerting on
    = @start_date
  - else
    Alerts that recovered within 2 minutes of alerting between
    = @start_date
    and
    = @end_date
  - if @search
    matching term
    = '"'+@search+'"'

%div{:id => 'noisecandidatechart'}

%form{:action => '', :method => 'post', :role => 'form', :class => 'form', :id => 'noise-candidates'}
  %h3
    Alert list (total: #{@total})
  %table#incidents-table.table.table-hover.table-striped.table-bordered.table-condensed.tablesorter
    %thead
      %tr
        %th#count
          Count
        %th#source.filter-select
          Source
        %th#entity
          Entity
        %th#check
          Check
        %th#mean_time_to_resolve
          Average time to resolve (s)
    %tbody
      - @incidents.each do |incident|
        %tr
          %td= incident['count']
          %td= incident['input_type']
          %td
            %a{:href => "#{@pigeonhole_domain}/history/#{incident['entity']}/all"}= incident['entity']
          %td
            %a{:href => "#{@pigeonhole_domain}/history/all/#{incident['check']}"}= incident['check']
          %td= incident['mean_time_to_resolve']

%script{:src => "/js/d3.v3.min.js"}

:javascript

  var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

  var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

  var y = d3.scale.linear()
    .range([height, 0]);

  var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

  var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10, "%");

  var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  d3.json('#{@series}', function( error, data) {
  //if (error) throw error;

  x.domain(data.map(function(d) { return d.letter; }));
  y.domain([0, d3.max(data, function(d) { return d.frequency; })]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Frequency");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d.letter); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.frequency); })
      .attr("height", function(d) { return height - y(d.frequency); });
  });

  function type(d) {
    d.frequency = +d.frequency;
    return d;
  }
